      // Generated by CoffeeScript 1.6.3
var Cloner, Random, StrictMath, println, typeIsArray;

if (!Array.prototype.filter) {
  Array.prototype.filter = function(callback) {
    var element, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      element = this[_i];
      if (callback(element)) {
        _results.push(element);
      }
    }
    return _results;
  };
}

if (typeof println === "undefined" || println === null) {
  if (typeof console !== "undefined" && console !== null) {
    println = console.log;
  }
  if (println == null) {
    println = java.lang.System.out.println;
  }
}

typeIsArray = function(value) {
  return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));
};

if (typeof Random === "undefined" || Random === null) {
  Random = {};
  Random.nextInt = function(limit) {
    return Math.floor(Math.random() * limit);
  };
  Random.nextLong = Random.nextInt;
  Random.nextDouble = function() {
    return Math.random();
  };
}

Cloner = {
  clone: function(obj) {
    var key, temp, _i, _len, _ref;
    if (obj === null || typeof obj !== "object") {
      return obj;
    }
    temp = new obj.constructor();
    _ref = Object.getOwnPropertyNames(obj);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      temp[key] = this.clone(obj[key]);
    }
    return temp;
  }
};

if (typeof StrictMath === "undefined" || StrictMath === null) {
  StrictMath = Cloner.clone(Math);
  StrictMath.toRadians = function(degrees) {
    return degrees * Math.PI / 180;
  };
  StrictMath.toDegrees = function(radians) {
    return radians * 180 / Math.PI;
  };
}
;
;
;
;

/*
 * global boolean value that keeps track of whether the student data
 * was initialized
 */
initialized = false;

Globals.init(84);
Breeds.add("DRAWING-DOTS", "drawing-dot");
Breeds.get("DRAWING-DOTS").vars =[""];
Breeds.add("READERS", "reader");
Breeds.get("READERS").vars =[""];
Breeds.add("MARKERS", "marker");
Breeds.get("MARKERS").vars =[""];
Breeds.add("CARS", "car");
Breeds.get("CARS").vars =[""];
function dataExportLogEvent(m, plist, unused1, unused2) {
  logCODAPAction(m + ' Per-run Settings and Data: {"fields": ["Challenge ()", "Step ()", "Start height (m)", "Friction ()", "Mass (g)", "End distance (m)"],"values": [%@, %@, %@, %@, %@, %@]}',
      [Globals.getGlobal(42), Globals.getGlobal(43), Globals.getGlobal(34), Globals.getGlobal(0), Globals.getGlobal(20), Prims.precision(Globals.getGlobal(68), 2)])
}

function dataExportClearLastRun() {
  clearCODAPData()
}
function dataExportUpdateRunSeries(series) {
  record(series)
}
function myUserMessage(msg) {
  window.alert(msg)

}
function myClearOutput() {
  var outputArea = document.getElementById('output');
  while(outputArea.childNodes.length > 0) {
    outputArea.removeChild(outputArea.childNodes[0]);
  }
}
function myUserYesOrNo_p(question) {

}
function startup() {
  world.clearAll();
  world.resetTicks();
  drawFirstPage();
  Globals.setGlobal(11, true);
  Globals.setGlobal(67, false);
  Globals.setGlobal(12, false);
  Globals.setGlobal(13, false);
  Globals.setGlobal(66, false);
}

var everyDtDate = Date.now()

function go() {
  if (Globals.getGlobal(11)) {
    AgentSet.ask(world.turtlesOfBreed("DRAWING-DOTS"), true, function() {
      AgentSet.die();
    });
    Globals.setGlobal(11, false);
    initialize();
  }

  if(Date.now() - everyDtDate > 1000 * Globals.getGlobal(30)) {
    everyDtDate = Date.now()
    if (Globals.getGlobal(12)) {
      runCar();
    }
    actOnChanges();
    supportMouse();
    world.tick();
  }
}
function actOnChanges() {
  if (Globals.getGlobal(27)) {
    noop(5);
    Globals.setGlobal(27, false);
  }
  if (!Prims.equality(Globals.getGlobal(0), Globals.getGlobal(50))) {
    if ((!Globals.getGlobal(48) && !Globals.getGlobal(12))) {
      Globals.setGlobal(50, Globals.getGlobal(0));
    }
  }
}
function drawFirstPage() {
  AgentSet.ask(world.createTurtles(1, "DRAWING-DOTS"), true, function() {
    AgentSet.setTurtleVariable(10, 0.1);
    Prims.setXY((0.4 * world.minPxcor), (0.9 * world.maxPycor));
    AgentSet.setTurtleVariable(6, "Press the On/Off button to continue.");
  });
  AgentSet.ask(world.createTurtles(1, "DRAWING-DOTS"), true, function() {
    AgentSet.setTurtleVariable(10, 0.1);
    Prims.setXY((0.5 * world.minPxcor), (0.85 * world.maxPycor));
    AgentSet.setTurtleVariable(6, "   Leave it on all the time.");
  });
  AgentSet.ask(world.turtlesOfBreed("DRAWING-DOTS"), true, function() {
    AgentSet.setTurtleVariable(7, 15);
  });
}
function initialize() {
  Globals.setGlobal(30, 1 / calculationRefreshPerSecond);
  Globals.setGlobal(28, 9.81);
  Globals.setGlobal(13, false);
  Globals.setGlobal(67, true);
  Globals.setGlobal(12, false);
  Globals.setGlobal(15, false);
  Globals.setGlobal(27, false);
  Globals.setGlobal(39, 50);
  Globals.setGlobal(37, 1.34);
  Globals.setGlobal(38, 0.45);
  defineWindow();
  defineTransforms();
  Globals.setGlobal(72, true);
  Globals.setGlobal(17, (105 + 2));
  Globals.setGlobal(16, [[-1.6, 1.1], [0, 0], [0.5, 0], [1, 0], [1.5, 0], [2, 0], [2.5, 0], [3, 0], [3.5, 0], [4, 0], [5, 0]]);
  drawRamp();
  Globals.setGlobal(21, 12);
  Globals.setGlobal(35, -0.9);
  Globals.setGlobal(22, 22);
  AgentSet.ask(world.createTurtles(1, "CARS"), true, function() {
    AgentSet.self().hideTurtle(true);;
    if (Prims.equality(Globals.getGlobal(42), 4)) {
      Globals.setGlobal(20, 200);
    }
    else {
      Globals.setGlobal(20, 100);
    }
    AgentSet.setTurtleVariable(1, 15);
    AgentSet.setTurtleVariable(5, "car");
    AgentSet.setTurtleVariable(10, Globals.getGlobal(22));
    placeCar(Globals.getGlobal(35));
  });
  Globals.setGlobal(73, false);
  AgentSet.ask(world.createTurtles(1, "MARKERS"), true, function() {
    AgentSet.self().hideTurtle(true);;
    Globals.setGlobal(63, AgentSet.getTurtleVariable(0));
    AgentSet.setTurtleVariable(1, 15);
    AgentSet.setTurtleVariable(10, 0.1);
    AgentSet.setTurtleVariable(2, 0);
  });
  AgentSet.ask(world.createTurtles(1, "MARKERS"), true, function() {
    AgentSet.self().hideTurtle(true);;
    Globals.setGlobal(64, AgentSet.getTurtleVariable(0));
    AgentSet.setTurtleVariable(1, 15);
    AgentSet.setTurtleVariable(10, 0.1);
    AgentSet.setTurtleVariable(2, 0);
    AgentSet.ask(AgentSet.createLinkWith(world.getTurtleOfBreed("MARKERS", Globals.getGlobal(63))), true, function() {
      AgentSet.setLinkVariable(7, 3);
      AgentSet.setTurtleVariable(1, 15);
    });
  });
  AgentSet.ask(world.createTurtles(1, "MARKERS"), true, function() {
    AgentSet.self().hideTurtle(true);;
    Globals.setGlobal(65, AgentSet.getTurtleVariable(0));
    AgentSet.setTurtleVariable(1, 15);
    AgentSet.setTurtleVariable(10, 18);
    AgentSet.setTurtleVariable(2, 0);
    AgentSet.setTurtleVariable(5, "line");
  });
  AgentSet.ask(world.createTurtles(1, "DRAWING-DOTS"), true, function() {
    Globals.setGlobal(76, AgentSet.getTurtleVariable(0));
    AgentSet.setTurtleVariable(10, 0.1);
    AgentSet.setTurtleVariable(1, 0);
    AgentSet.setTurtleVariable(7, 9.9);
  });
  Globals.setGlobal(36, true);
  Globals.setGlobal(2, 46);
  Globals.setGlobal(40, 0);
  Globals.setGlobal(41, 0);
  Globals.setGlobal(1, [0, 0, 0, 0, 0, 0]);
  Globals.setGlobal(77, [2.91, 1.04, 2.31, 0.52, 2.53, 3.81, 1.96, 2.77, 0.73, 1.53, 3.29, 1.25, 2.25, 0.83, 3.10, 1.75, 0.95, 2.43, 3.05, 0.85]);
  Globals.setGlobal(71, 0);
  Globals.setGlobal(42, 1);
  Globals.setGlobal(43, 1);
  Globals.setGlobal(70, Globals.getGlobal(42));
  Globals.setGlobal(69, Globals.getGlobal(43));
  Globals.setGlobal(62, 5);
  setupGame();
  showTarget();
  myClearOutput();
  prettyPrint("Challenge 1: Make the car stop in the middle of the red zone. Place the car on the ramp by clicking on it and dragging it.");
  prettyPrint("As you get better, the red target will get smaller.");
  setupDataExport();
  setupNewRun();
  world.resetTicks();
  world.resetTimer();
  initializeTableData();
  getLatestStudentWork();
}
function defineWindow() {
  Globals.setGlobal(7, (world.minPxcor + 2));
  Globals.setGlobal(8, (world.maxPxcor - 2));
  Globals.setGlobal(9, 0);
  Globals.setGlobal(10, (world.maxPycor - 2));
}
function inWindow_p(u, v) {
  return ((((Globals.getGlobal(7) < u) && (u < Globals.getGlobal(8))) && (Globals.getGlobal(9) < v)) && (v < Globals.getGlobal(10)));
}
function defineTransforms() {
  var uCenter = ((Globals.getGlobal(7) + Globals.getGlobal(8)) / 2);
  var vCenter = ((Globals.getGlobal(9) + Globals.getGlobal(10)) / 2);
  Globals.setGlobal(3, Globals.getGlobal(39));
  Globals.setGlobal(5, Globals.getGlobal(39));
  Globals.setGlobal(4, (uCenter - (Globals.getGlobal(37) * Globals.getGlobal(39))));
  Globals.setGlobal(6, (vCenter - (Globals.getGlobal(38) * Globals.getGlobal(39))));
}
function supportMouse() {
  if (!(inWindow_p(session.controller.mouseXcor, session.controller.mouseYcor))) {
    return;
  }
  if (Globals.getGlobal(26) || Globals.getGlobal(12) || Globals.getGlobal(13) || Globals.getGlobal(66)) {
    return;
  }
  if (session.controller.mouseDown && session.controller.mouseInside) {
    AgentSet.ask(world.turtlesOfBreed("CARS"), true, function() {
      placeCar(((session.controller.mouseXcor - Globals.getGlobal(4)) / Globals.getGlobal(3)));
    });
  }
}
function drawRamp() {
  var object = Globals.getGlobal(16);
  var pairZero = [];
  if (!(Prims.empty(object))) {
    pairZero = Prims.first(object);
    object = Prims.butFirst(object);
  }
  while (!(Prims.empty(object))) {
    var pairOne = Prims.first(object);
    object = Prims.butFirst(object);
    safeConnect(pairZero, pairOne, Globals.getGlobal(17), (Globals.getGlobal(39) / 20));
    pairZero = pairOne;
  }
}
function safeConnect(p0, p1, c, wide) {
  var u0 = ((Globals.getGlobal(3) * Prims.first(p0)) + Globals.getGlobal(4));
  var u1 = ((Globals.getGlobal(3) * Prims.first(p1)) + Globals.getGlobal(4));
  var v0 = ((Globals.getGlobal(5) * Prims.last(p0)) + Globals.getGlobal(6));
  var v1 = ((Globals.getGlobal(5) * Prims.last(p1)) + Globals.getGlobal(6));
  if ((Prims.equality(u0, u1) && Prims.equality(v0, v1))) {
    return;
  }
  var w = 0;
  AgentSet.ask(world.createTurtles(1, "DRAWING-DOTS"), true, function() {
    AgentSet.setTurtleVariable(10, (0.1 * Globals.getGlobal(39)));
    AgentSet.setTurtleVariable(5, "tick mark");
    AgentSet.setTurtleVariable(1, 9.9);
    AgentSet.setTurtleVariable(2, 0);
    Prims.setXY(u0, v0);
    w = AgentSet.getTurtleVariable(0);
  });
  AgentSet.ask(world.createTurtles(1, "DRAWING-DOTS"), true, function() {
    var x0 = ((u0 - Globals.getGlobal(4)) / Globals.getGlobal(3));
    if ((x0 >= 0)) {
      AgentSet.setTurtleVariable(10, 0.1);
      AgentSet.setTurtleVariable(1, (0 + 4.5));
      AgentSet.setTurtleVariable(7, 9.9);
      AgentSet.setTurtleVariable(6, (Dump("") + Dump(Prims.precision(x0, 2)) + Dump(" m")));
      Prims.setXY((u0 + 6), (v0 - 6));
    }
  });
  AgentSet.ask(world.createTurtles(1, "DRAWING-DOTS"), true, function() {
    AgentSet.self().hideTurtle(true);;
    if ((u1 > Globals.getGlobal(8))) {
      u1 = Globals.getGlobal(8);
    }
    Prims.setXY(u1, v1);
    AgentSet.ask(AgentSet.createLinkWith(world.getTurtleOfBreed("DRAWING-DOTS", w)), true, function() {
      AgentSet.setLinkVariable(7, wide);
      AgentSet.setTurtleVariable(1, c);
    });
  });
}
function runCar() {
  var aRamp = 1;
  if ((Globals.getGlobal(12) && !(Globals.getGlobal(15)))) {
    Globals.setGlobal(15, true);
    Globals.setGlobal(29, 0);
    Globals.setGlobal(35, Prims.precision(Globals.getGlobal(23), 2));
    Globals.setGlobal(34, Prims.precision(Globals.getGlobal(31), 2));
    var d0 = StrictMath.sqrt(((Globals.getGlobal(23) * Globals.getGlobal(23)) + (Globals.getGlobal(24) * Globals.getGlobal(24))));
    var cosTheta = 1;
    var sinTheta = 0;
    if (!Prims.equality(d0, 0)) {
      cosTheta = (StrictMath.abs(Globals.getGlobal(23)) / d0);
      sinTheta = (Globals.getGlobal(24) / d0);
    }
    aRamp = (Globals.getGlobal(28) * (sinTheta - (Globals.getGlobal(0) * cosTheta)));
    var aFloor = (0 - (Globals.getGlobal(28) * Globals.getGlobal(0)));
    Globals.setGlobal(79, StrictMath.sqrt(((2 * d0) / aRamp)));
    Globals.setGlobal(81, (aRamp * Globals.getGlobal(79)));
    Globals.setGlobal(82, ((0.5 * aRamp) * cosTheta));
    Globals.setGlobal(83, (0.5 * aFloor));
    Globals.setGlobal(80, (Globals.getGlobal(79) - (Globals.getGlobal(81) / aFloor)));
  }
  if ((Globals.getGlobal(29) >= Globals.getGlobal(80))) {
    handleRunEnd("You can now analyze your data. Press the 'Analyze Data' button.");
    return;
  }
  if ((aRamp <= 0)) {
    handleRunEnd("The car cannot move. Too much friction.");
  }
  if ((Globals.getGlobal(23) < 0)) {
    Globals.setGlobal(23, (Globals.getGlobal(35) + ((Globals.getGlobal(82) * Globals.getGlobal(29)) * Globals.getGlobal(29))));
    Globals.setGlobal(25, ((2 * Globals.getGlobal(82)) * Globals.getGlobal(29)));
  }
  if ((Globals.getGlobal(23) >= 0)) {
    var timeFloor = (Globals.getGlobal(29) - Globals.getGlobal(79));
    Globals.setGlobal(23, (timeFloor * (Globals.getGlobal(81) + (Globals.getGlobal(83) * timeFloor))));
    Globals.setGlobal(25, (Globals.getGlobal(81) + ((2 * Globals.getGlobal(83)) * timeFloor)));
  }
  if ((Globals.getGlobal(23) > 4.3)) {
    crash();
  }
  placeCar(Globals.getGlobal(23));
  Globals.setGlobal(29, (Globals.getGlobal(29) + Globals.getGlobal(30)));
}
function crash() {
  Globals.setGlobal(25, 0);
  handleRunEnd("Oops, you crashed the car!!");
  AgentSet.ask(world.turtlesOfBreed("CARS"), true, function() {
    AgentSet.setTurtleVariable(5, "crash");
    var oldSize = AgentSet.getTurtleVariable(10);
    AgentSet.setTurtleVariable(10, 20);
    Prims.repeat(12, function () {
      AgentSet.setTurtleVariable(10, (AgentSet.getTurtleVariable(10) + 10));
    });
    Globals.setGlobal(23, 4.2);
    AgentSet.setTurtleVariable(5, "car");
    AgentSet.setTurtleVariable(10, oldSize);
  });
}
function handleRunEnd(mess) {
  Globals.setGlobal(68, Globals.getGlobal(23));
  Globals.setGlobal(12, false);
  Globals.setGlobal(15, false);
  Globals.setGlobal(13, true);
  myClearOutput();
  prettyPrint(mess);
  analyzeButton.disabled = false;
}
function captureFinalState() {
  if ((!(Globals.getGlobal(11)) && !(Globals.getGlobal(12)))) {
    Globals.setGlobal(15, false);
    Globals.setGlobal(13, true);
    AgentSet.ask(world.turtlesOfBreed("CARS"), true, function() {
      updateRunSeries(Prims.precision(Globals.getGlobal(68), 2));
    });
  }
}
function placeCar(x) {
  var mult = 1;
  if (Prims.equality(Globals.getGlobal(42), 4)) {
    mult = 1.4;
  }
  var offMult = 1;
  if (Prims.equality(Globals.getGlobal(42), 4)) {
    offMult = 1.2;
  }
  var oldOffset = Globals.getGlobal(21);
  AgentSet.ask(world.turtlesOfBreed("CARS"), true, function() {
    AgentSet.setTurtleVariable(10, (((Globals.getGlobal(22) * 0.01) * mult) * Globals.getGlobal(39)));
    Globals.setGlobal(21, (offMult * Globals.getGlobal(21)));
    Globals.setGlobal(23, x);
    var loc = uvOfCar();
    var u = Prims.first(loc);
    var v = Prims.last(loc);
    if (inWindow_p(u, v)) {
      AgentSet.self().hideTurtle(false);;
      Prims.setXY(u, v);
    }
    else {
      AgentSet.self().hideTurtle(true);;
    }
  });
  Globals.setGlobal(21, oldOffset);
}
function uvOfCar() {
  var disp = ((Globals.getGlobal(21) * 0.01) * Globals.getGlobal(39));
  var u = ((Globals.getGlobal(3) * Globals.getGlobal(23)) + Globals.getGlobal(4));
  var info = trackHeight(Globals.getGlobal(16), Globals.getGlobal(23));
  var y = Prims.first(info);
  Globals.setGlobal(24, y);
  Globals.setGlobal(31, y);
  var v = ((Globals.getGlobal(5) * y) + Globals.getGlobal(6));
  AgentSet.setTurtleVariable(2, (Prims.last(info) - 90));
  disp = (disp / Trig.unsquashedCos(AgentSet.getTurtleVariable(2)));
  return Prims.list(u, (v + disp));
}
function trackHeight(pairs, x) {
  if ((x < Prims.first(Prims.first(pairs)))) {
    return Prims.list(0, 90);
  }
  if ((x > Prims.first(Prims.last(pairs)))) {
    return Prims.list(0, 90);
  }
  var i = 1;
  while ((i < Prims.length(pairs))) {
    var x0 = Prims.first(Prims.item((i - 1), pairs));
    var x1 = Prims.first(Prims.item(i, pairs));
    if (((x >= x0) && (x <= x1))) {
      var y0 = Prims.last(Prims.item((i - 1), pairs));
      var y1 = Prims.last(Prims.item(i, pairs));
      if (Prims.equality(x0, x1)) {
        return Prims.list((0.5 * (y0 + y1)), 0);
      }
      var direction = Trig.atan((x1 - x0), (y1 - y0));
      return Prims.list((y0 + (((x - x0) * (y1 - y0)) / (x1 - x0))), direction);
    }
    i = (i + 1);
  }
}
function setupNewRun() {
  if (!(Globals.getGlobal(66))) {
    dataExportLogEvent("User tried to setup a new run before analyzing data.", "", "", "");
    return;
  }
  Globals.setGlobal(66, false);
  Globals.setGlobal(43, Globals.getGlobal(69));
  Globals.setGlobal(42, Globals.getGlobal(70));
  var endpoint = 0;
  dataExportLogEvent("User set up a new run.", createRunParameterList(endpoint), "", "");
  Globals.setGlobal(66, false);
  Globals.setGlobal(67, true);
  myClearOutput();
  setupGame();
  showTarget();
  Globals.setGlobal(29, 0);
  AgentSet.ask(world.turtlesOfBreed("CARS"), true, function() {
    AgentSet.setTurtleVariable(1, 15);
    if (Prims.equality(Globals.getGlobal(42), 3)) {
      AgentSet.setTurtleVariable(1, 55);
    }
    if (Prims.equality(Globals.getGlobal(42), 4)) {
      AgentSet.setTurtleVariable(1, 105);
    }
  });
  if (Prims.equality(Globals.getGlobal(42), 5)) {
    Globals.setGlobal(35, -0.5);
  }
  AgentSet.ask(world.turtlesOfBreed("CARS"), true, function() {
    placeCar(Globals.getGlobal(35));
    Globals.setGlobal(25, 0);
  });
  Globals.setGlobal(12, false);
  Globals.setGlobal(15, false);
  dataExportClearLastRun();
  showTarget();
  prettyPrint(Globals.getGlobal(46));
  world.tick();
}
function showTarget() {
  var y = Prims.first(trackHeight(Globals.getGlobal(16), Globals.getGlobal(56)));
  AgentSet.ask(world.getTurtleOfBreed("MARKERS", Globals.getGlobal(63)), true, function() {
    var u = ((Globals.getGlobal(3) * (Globals.getGlobal(56) - Globals.getGlobal(59))) + Globals.getGlobal(4));
    var v = (((Globals.getGlobal(5) * y) + Globals.getGlobal(6)) + 3);
    Prims.setXY(u, v);
    AgentSet.self().hideTurtle(false);;
  });
  AgentSet.ask(world.getTurtleOfBreed("MARKERS", Globals.getGlobal(64)), true, function() {
    var u = ((Globals.getGlobal(3) * (Globals.getGlobal(56) + Globals.getGlobal(59))) + Globals.getGlobal(4));
    var v = (((Globals.getGlobal(5) * y) + Globals.getGlobal(6)) + 3);
    Prims.setXY(u, v);
    AgentSet.self().hideTurtle(false);;
  });
  AgentSet.ask(world.getTurtleOfBreed("MARKERS", Globals.getGlobal(65)), true, function() {
    var u = ((Globals.getGlobal(3) * Globals.getGlobal(56)) + Globals.getGlobal(4));
    var v = (((Globals.getGlobal(5) * y) + Globals.getGlobal(6)) + 4.5);
    Prims.setXY(u, v);
    AgentSet.self().hideTurtle(false);;
    AgentSet.ask(world.getTurtleOfBreed("DRAWING-DOTS", Globals.getGlobal(76)), true, function() {
      Prims.setXY((u + 10), (v + 14));
      AgentSet.setTurtleVariable(6, (Dump("") + Dump(Prims.precision(Globals.getGlobal(56), 2)) + Dump(" m")));
    });
  });
}
function startRun() {
  startButton.disabled = true;
  frictionSlider.disabled = true;
  if (Globals.getGlobal(66)) {
    dataExportLogEvent("User tried to start before pressing 'setup'.", "", "", "");
    return;
  }
  if (!(Globals.getGlobal(67))) {
    return;
  }
  if (Globals.getGlobal(12)) {
    dataExportLogEvent("User tried to start while running.", "", "", "");
    return;
  }
  if ((Globals.getGlobal(23) >= 0)) {
    prettyPrint("Place the car on the ramp.");
    startButton.disabled = false;
    dataExportLogEvent("User tried to start with car on the level floor.", "", "", "");
    return;
  }
  if (!(Globals.getGlobal(36))) {
    if (myUserYesOrNo_p("If you run now, you will lose data. Press the 'Analyze data' button to save your data.")) {
      return;
    }
  }
  Globals.setGlobal(36, false);
  Globals.setGlobal(67, false);
  Globals.setGlobal(13, false);
  Globals.setGlobal(25, 0);
  var endpoint = 0;
  endpoint = Prims.precision(Globals.getGlobal(23), 2);
  dataExportLogEvent((Dump("") + Dump("User started the model with the following level and step: ") + Dump(Globals.getGlobal(42)) + Dump(" ") + Dump(Globals.getGlobal(43)) + Dump(".")), createRunParameterList(endpoint), "", "");
  Globals.setGlobal(12, true);
  Globals.setGlobal(29, 0);
  initialized = true;
}
function getNextStep() {
  setupButton.disabled = false;
  var upperBreak = ((2 * Globals.getGlobal(54)) / 3);
  var lowerBreak = (Globals.getGlobal(54) / 4);
  Globals.setGlobal(73, true);
  
  if (Globals.getGlobal(55) == 6) {
    // relax the scoring on the last challenge to prevent challenges from being impossible to complete
    upperBreak = lowerBreak;
  }
  if ((Globals.getGlobal(41) > upperBreak)) {
    // the student successfully stopped the car in the range
    myClearOutput();
    prettyPrint((Dump("") + Dump("Congratulations! You earned ") + Dump(Globals.getGlobal(41)) + Dump(" points! You advance a step and the target gets smaller.")));
    Globals.setGlobal(69, (Globals.getGlobal(43) + 1));
    if ((Globals.getGlobal(69) > Globals.getGlobal(55)) || Prims.equality(Globals.getGlobal(42), 1)) {
      /*
       * the current step number is greater than the max step number for the current challenge
       * or the we are on the first challenge
       */
      if ((Globals.getGlobal(42) < Globals.getGlobal(62))) {
        myClearOutput();
        prettyPrint((Dump("") + Dump("Congratulations! You earned ") + Dump(Globals.getGlobal(41)) + Dump(" points! You advance to a new challenge!!")));
        prettyPrint("Before going on, please open your lab notebook and record what you learned in this challenge.");
        Globals.setGlobal(27, true);
        Globals.setGlobal(69, 1);
        Globals.setGlobal(70, (Globals.getGlobal(42) + 1));
        saveTrial(true);
        return;
      }
      if ((Globals.getGlobal(70) >= Globals.getGlobal(62))) {
        Globals.setGlobal(70, Globals.getGlobal(62));
        Globals.setGlobal(69, Globals.getGlobal(55));
        if (Globals.getGlobal(72)) {
          myClearOutput();
          prettyPrint((Dump("") + Dump("Incredible!! You have completed the hardest challenge. You are a winner.")));
          prettyPrint("You can contine to earn points in this challenge, but first, jot down what you learned in your lab notebook.");
          Globals.setGlobal(72, false);
          Globals.setGlobal(27, true);
        }
      }
    }
    saveTrial(true);
    return;
  }
  if ((Globals.getGlobal(41) >= lowerBreak)) {
    // the student successfully stopped the car in the range
    myClearOutput();
    Globals.setGlobal(73, false);
    prettyPrint((Dump("") + Dump("OK! You earned ") + Dump(Globals.getGlobal(41)) + Dump(" points. Try again.")));
    prettyPrint((Dump("") + Dump("You have to get ") + Dump(StrictMath.round(upperBreak)) + Dump(" points to advance.")));
    saveTrial(true);
    return;
  }
  if ((Globals.getGlobal(41) < lowerBreak)) {
    // the student did not stop the car in the range
    Globals.setGlobal(73, false);
    myClearOutput();
    var m = (Dump("") + Dump("Not so good. You score ") + Dump(Globals.getGlobal(41)) + Dump(" points."));
    if ((Globals.getGlobal(43) > 1)) {
      m = (Dump("") + Dump(m) + Dump(" Since your score was less than ") + Dump(StrictMath.round(lowerBreak)) + Dump(" you now get a larger target."));
    }
    prettyPrint(m);
    //Globals.setGlobal(69, (Globals.getGlobal(43) - 1));
    if (Prims.equality(Globals.getGlobal(43), 1)) {
      Globals.setGlobal(69, 1);
    }
    saveTrial(false);
  }
}
function setupGame() {
  setupGameLevel();
  setupGameStep();
}
function setupGameLevel() {
  Globals.setGlobal(54, 100);
  Globals.setGlobal(74, false);
  if (Prims.equality(Globals.getGlobal(42), 1)) {
    Globals.setGlobal(46, "Place the car where you want it to start.");
    if (Prims.equality(Globals.getGlobal(43), 1)) {
      Globals.setGlobal(46, "Challenge 1: Make the car stop in the center of the red area by changing the car's starting position.");
      Globals.setGlobal(46, (Dump("") + Dump(Globals.getGlobal(46)) + Dump(" As you get better, the red target will get smaller.")));
      Globals.setGlobal(46, (Dump("") + Dump(Globals.getGlobal(46)) + Dump(" When you press 'Analyze Data' your data is saved and graphed. The graph will help you later.")));
    }
    Globals.setGlobal(0, 0.18);
    Globals.setGlobal(50, Globals.getGlobal(0));
    Globals.setGlobal(48, true);
    Globals.setGlobal(49, false);
    Globals.setGlobal(26, false);
    Globals.setGlobal(55, 1);
    Globals.setGlobal(57, 0.4);
    Globals.setGlobal(58, 0.15);
    Globals.setGlobal(74, true);
  }
  if (Prims.equality(Globals.getGlobal(42), 2)) {
    Globals.setGlobal(46, "");
    if (Prims.equality(Globals.getGlobal(43), 1)) {
      Globals.setGlobal(46, "Challenge 2: Make the car stop in the center of the red area by changing the car's starting position.");
      Globals.setGlobal(46, (Dump("") + Dump(Globals.getGlobal(46)) + Dump(" Watch out!! The red band now moves each trial.")));
    }
    Globals.setGlobal(0, 0.18);
    Globals.setGlobal(50, Globals.getGlobal(0));
    Globals.setGlobal(48, true);
    Globals.setGlobal(49, false);
    Globals.setGlobal(55, 4);
    Globals.setGlobal(26, false);
    Globals.setGlobal(57, 0.4);
    Globals.setGlobal(58, 0.15);
  }
  if (Prims.equality(Globals.getGlobal(42), 3)) {
    Globals.setGlobal(46, "");
    if (Prims.equality(Globals.getGlobal(43), 1)) {
      Globals.setGlobal(46, "Challenge 3: Make a new car stop in the red area. This car has less friction.");
    }
    Globals.setGlobal(0, 0.08);
    Globals.setGlobal(20, 100);
    Globals.setGlobal(50, Globals.getGlobal(0));
    Globals.setGlobal(49, false);
    Globals.setGlobal(26, false);
    Globals.setGlobal(55, 4);
    Globals.setGlobal(57, 0.4);
    Globals.setGlobal(58, 0.2);
  }
  if (Prims.equality(Globals.getGlobal(42), 4)) {
    Globals.setGlobal(46, "");
    if (Prims.equality(Globals.getGlobal(43), 1)) {
      Globals.setGlobal(46, "Challenge 4: Make this heavier car stop in the center of the red area. This car is twice the mass of the last car, but the friction is back to what it was before.");
    }
    Globals.setGlobal(0, 0.18);
    Globals.setGlobal(20, 200);
    Globals.setGlobal(50, Globals.getGlobal(0));
    Globals.setGlobal(49, false);
    Globals.setGlobal(48, true);
    Globals.setGlobal(26, false);
    Globals.setGlobal(55, 3);
    Globals.setGlobal(53, -0.8);
    Globals.setGlobal(52, -0.8);
    Globals.setGlobal(57, 0.3);
    Globals.setGlobal(58, 0.13);
  }
  if (Prims.equality(Globals.getGlobal(42), 5)) {
    Globals.setGlobal(46, "");
    if (Prims.equality(Globals.getGlobal(43), 1)) {
      Globals.setGlobal(46, "Challenge 5: Now make the car stop in the center of the red area by changing the friction. ");
    }
    Globals.setGlobal(0, 0.18);
    Globals.setGlobal(20, 100);
    Globals.setGlobal(50, Globals.getGlobal(0));
    Globals.setGlobal(49, true);
    Globals.setGlobal(48, false);
    Globals.setGlobal(26, true);
    Globals.setGlobal(55, 6);
    Globals.setGlobal(57, 0.4);
    Globals.setGlobal(58, 0.13);
  }
  setupButton.disabled = true;
  analyzeButton.disabled = true;
  startButton.disabled = false;
  frictionSlider.style.display = Globals.getGlobal(48) ? "none" : "inline";
  frictionSlider.disabled = Globals.getGlobal(48);
}
function setupGameStep() {
  if ((Globals.getGlobal(73) && !(Globals.getGlobal(74)))) {
    Globals.setGlobal(75, Prims.mod((Globals.getGlobal(75) + 1), Prims.length(Globals.getGlobal(77))));
  }
  Globals.setGlobal(56, Prims.item(Globals.getGlobal(75), Globals.getGlobal(77)));
  Globals.setGlobal(59, (Globals.getGlobal(57) + (((Globals.getGlobal(58) - Globals.getGlobal(57)) * (Globals.getGlobal(43) - 1)) / Prims.max([(Globals.getGlobal(55) - 1), 1]))));
  if (((Globals.getGlobal(59) + Globals.getGlobal(56)) > 4.3)) {
    Globals.setGlobal(59, (4.3 - Globals.getGlobal(56)));
  }
}
function randomBetween(a, b) {
  return (a + Prims.randomFloat((b - a)));
}
function prettyPrint(mess) {
  if (Prims.equality(mess, 0)) {
    return;
  }
  if (Prims.empty(mess)) {
    return;
  }
  var line = "";
  if ((Prims.length(mess) <= Globals.getGlobal(2))) {
    Prims.outputPrint(mess);
    return;
  }
  var i = 0;
  var n = -1;
  while ((i < Globals.getGlobal(2))) {
    var ch = Prims.item(i, mess);
    if (Prims.equality(ch, " ")) {
      n = i;
    }
    i = (i + 1);
  }
  if (Prims.equality(n, -1)) {
    line = Prims.substring(mess, 0, Globals.getGlobal(2));
    mess = Prims.substring(mess, Globals.getGlobal(2), Prims.length(mess));
  }
  else {
    if (Prims.equality(n, Globals.getGlobal(2))) {
      line = Prims.substring(mess, 0, n);
      mess = Prims.substring(mess, n, Prims.length(mess));
    }
    else {
      line = Prims.substring(mess, 0, n);
      mess = Prims.substring(mess, (n + 1), Prims.length(mess));
    }
  }
  Prims.outputPrint(line);
  prettyPrint(mess);
}
function updateScore() {
  Globals.setGlobal(41, 0);
  if ((StrictMath.abs((Globals.getGlobal(68) - Globals.getGlobal(56))) < Globals.getGlobal(59))) {
    Globals.setGlobal(71, (Globals.getGlobal(71) - 1));
    if ((Globals.getGlobal(71) < 0)) {
      Globals.setGlobal(71, 0);
    }
    Globals.setGlobal(41, ((0.5 * Globals.getGlobal(54)) * (1 + Trig.unsquashedCos(((180 * StrictMath.abs((Globals.getGlobal(68) - Globals.getGlobal(56)))) / Globals.getGlobal(59))))));
    Globals.setGlobal(41, (5 * StrictMath.round((0.2 * Globals.getGlobal(41)))));
  }
  Globals.setGlobal(40, StrictMath.round((Globals.getGlobal(40) + Globals.getGlobal(41))));
  Globals.setGlobal(41, StrictMath.round(Globals.getGlobal(41)));
  if ((StrictMath.abs((Globals.getGlobal(68) - Globals.getGlobal(56))) > (2 * Globals.getGlobal(59)))) {
    Globals.setGlobal(71, (Globals.getGlobal(71) + 1));
    if ((Globals.getGlobal(71) > 2)) {
      prettyPrint("It looks like you are just guessing. All the information that you need to hit the target is in the graph.");
      noop(5);
    }
    if ((Globals.getGlobal(71) > 3)) {
      Globals.setGlobal(71, 4);
      prettyPrint("You loose 100 points for gussing.");
      Globals.setGlobal(40, (Globals.getGlobal(40) - 100));
      if ((Globals.getGlobal(40) < 0)) {
        Globals.setGlobal(40, 0);
      }
    }
  }
  dataExportLogEvent((Dump("") + Dump("User score: ") + Dump(Globals.getGlobal(41)) + Dump(".")), "", "", "");
  dataExportLogEvent((Dump("") + Dump("User max score:") + Dump(Globals.getGlobal(54)) + Dump(".")), "", "", "");
}
function displayHelpMessage() {
  var numberShownAlready = Prims.item((Globals.getGlobal(42) - 1), Globals.getGlobal(1));
  Globals.setGlobal(1, Prims.replaceitem((Globals.getGlobal(42) - 1), Globals.getGlobal(1), (numberShownAlready + 1)));
  var m = "Sorry, no more hints are available.";
  if (Prims.equality(Globals.getGlobal(42), 1)) {
    if (Prims.equality(numberShownAlready, 0)) {
      m = "Before starting a run, move the car to where you think it will have enough energy to reach the center of the red target.";
      m = (Dump("") + Dump(m) + Dump(" Try to get the antenna on the car near the red line in the center of the red target."));
    }
    if (Prims.equality(numberShownAlready, 1)) {
      m = "Press the 'Start' button to start the car rolling down the ramp. ";
    }
    if (Prims.equality(numberShownAlready, 2)) {
      m = "After a good score you advance by one step and the red target gets smaller. ";
    }
    if (Prims.equality(numberShownAlready, 3)) {
      m = "After each run, save your data by pressing the 'Analyze Data' button. ";
    }
    if (Prims.equality(numberShownAlready, 4)) {
      m = "Before you can make a new run, you need to press the 'Setup New Run' button. ";
    }
    if (Prims.equality(numberShownAlready, 5)) {
      m = "The 'Setup New Run' button returns the car to its previous starting position. ";
    }
  }
  if (Prims.equality(Globals.getGlobal(42), 2)) {
    if (Prims.equality(numberShownAlready, 0)) {
      m = "In this challenge, the red target moves around each run.";
    }
    if (Prims.equality(numberShownAlready, 1)) {
      m = "Pay attention to the starting height above the floor. ";
    }
    if (Prims.equality(numberShownAlready, 2)) {
      m = "The graph can help you find the best place to start the car. ";
    }
    if (Prims.equality(numberShownAlready, 3)) {
      m = "Look carefully at the graph that shows starting height and distance traveled. ";
    }
    if (Prims.equality(numberShownAlready, 4)) {
      m = "Clicking on the gear at the top right of the graph allows you to connect points. Try this.";
    }
    if (Prims.equality(numberShownAlready, 5)) {
      m = "Under the gear is an option to draw and drag a line. This can be a big help. ";
    }
    if (Prims.equality(numberShownAlready, 5)) {
      m = "Expanding the scales on the graph can help you read values from the graph accurately.";
      m = (Dump("") + Dump(m) + Dump(" Do this by dragging at the end of the scales. To undo this, use the option under the gear to show all the data."));
    }
  }
  if (Prims.equality(Globals.getGlobal(42), 3)) {
    if (Prims.equality(numberShownAlready, 0)) {
      m = "For this challenge, the friction is lower than before.";
    }
    if (Prims.equality(numberShownAlready, 1)) {
      m = "Now when you save data, the points will trace out a different graph of distance against starting height.";
    }
    if (Prims.equality(numberShownAlready, 2)) {
      m = "Use the new graph of distance against starting height to predict starting positions at this challenge.";
    }
  }
  if (Prims.equality(numberShownAlready, 3)) {
    m = "One way to see the pattern is to clear out all the previous graph data before starting.";
  }
  if (Prims.equality(Globals.getGlobal(42), 4)) {
    if (Prims.equality(numberShownAlready, 0)) {
      m = "For this challenge, you can change only the starting position of the car.";
    }
    if (Prims.equality(numberShownAlready, 1)) {
      m = "Do you think a heavier car will travel further or less?";
    }
    if (Prims.equality(numberShownAlready, 2)) {
      m = "Note the friction value on the slider.";
    }
    if (Prims.equality(numberShownAlready, 3)) {
      m = "Hint: Think about Galileo's experiment at the Tower of Pisa.";
    }
  }
  if (Prims.equality(Globals.getGlobal(42), 5)) {
    if (Prims.equality(numberShownAlready, 0)) {
      m = "For this challenge, you cannot change the starting position of the car or the ramp height--you have to change friction.";
    }
    if (Prims.equality(numberShownAlready, 1)) {
      m = "To let the car go farther, do you think you should increase or decrease friction?";
    }
    if (Prims.equality(numberShownAlready, 2)) {
      m = "Hint: Use the graph that has friction on the x-axis.";
    }
    if (Prims.equality(numberShownAlready, 3)) {
      m = "On the graph, you want to see only the points generated by challenge 5. ";
      m = (Dump("") + Dump(m) + Dump("You can do this by selecting only the last items in the table."));
    }
  }
  prettyPrint(m);
  Globals.setGlobal(1, Prims.replaceitem((Globals.getGlobal(42) - 1), Globals.getGlobal(1), (numberShownAlready + 1)));
  dataExportLogEvent((Dump("") + Dump("User received the message ") + Dump(m)), "", "", "");
}
function scoreDisplay() {
  if (!((Prims.equality(Globals.getGlobal(42), 1) && Prims.equality(Globals.getGlobal(43), 1)))) {
    return (Dump("") + Dump(Globals.getGlobal(41)) + Dump(" out of ") + Dump(Globals.getGlobal(54)));
  }
  else {
    return "&nbsp;";
  }
}
function analyzeData() {
  if (!(Globals.getGlobal(13))) {
    dataExportLogEvent("User tried to analyze data before a run.", "", "", "");
    return;
  }
  myClearOutput();
  captureFinalState();
  updateScore();
  getNextStep();
  if ((Prims.equality(Globals.getGlobal(70), 1) && Prims.equality(Globals.getGlobal(69), 1))) {
    prettyPrint("Data saved. Do you see the new point on the graph?");
    prettyPrint("Now setup an new run by pressing the 'Setup New Run' button.");
  }
  Globals.setGlobal(13, false);
  Globals.setGlobal(36, true);
  Globals.setGlobal(66, true);
  analyzeButton.disabled = true;
  setupNewRun.disabled = false;
  openCODAPTable()
}
function setupDataExport() {
  var computationalInputs = [["Challenge", "", 1, 5, true], ["Step", "", 1, 8, true], ["Start height", "m", 0, 1.5, true], ["Friction", "", 0, 0.3, true], ["Mass", "g", 100, 200, true]];
  var representationalInputs = [];
  var computationalOutputs = [["End distance", "m", 0, 6, true]];
  var studentInputs = [];
  var modelInformation = [["ramp", "RampGame.v5b.nlogo", "Jan-7-2014"]];
  var timeSeriesData = [];
  var setup = Prims.list(computationalInputs, representationalInputs, computationalOutputs, studentInputs, modelInformation, timeSeriesData);
}
function updateRunSeries(endpoint) {
  dataExportUpdateRunSeries(Prims.list(Globals.getGlobal(42), Globals.getGlobal(43), Globals.getGlobal(34), Globals.getGlobal(0), Globals.getGlobal(20), endpoint));
  dataExportLogEvent("User exported the model.", createRunParameterList(endpoint), "", "");
}
function createRunParameterList(endpoint) {
  return Prims.list(Globals.getGlobal(34), Globals.getGlobal(0), endpoint, Globals.getGlobal(20));
}
Globals.setGlobal(0, 0.18);world = new World(-150, 150, 0, 85, 2.07, false, false, {"default":{"rotate":true,"elements":[{"xcors":[150.0,40.0,150.0,260.0],"ycors":[5.0,250.0,205.0,250.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"airplane":{"rotate":true,"elements":[{"xcors":[150.0,135.0,120.0,120.0,15.0,15.0,120.0,135.0,105.0,120.0,150.0,180.0,210.0,165.0,180.0,285.0,285.0,180.0,180.0,165.0],"ycors":[0.0,15.0,60.0,105.0,165.0,195.0,180.0,240.0,270.0,285.0,270.0,285.0,270.0,240.0,180.0,195.0,165.0,105.0,60.0,15.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"ambulance":{"rotate":true,"elements":[{"xmin":30.0,"ymin":90.0,"xmax":210.0,"ymax":195.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[296.0,296.0,259.0,244.0,210.0,210.0],"ycors":[190.0,150.0,134.0,104.0,105.0,190.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":195.0,"ymin":60.0,"xmax":195.0,"ymax":105.0,"type":"rectangle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":false},{"xcors":[238.0,252.0,219.0,218.0],"ycors":[112.0,141.0,141.0,112.0],"type":"polygon","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":234.0,"y":174.0,"diam":42.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":69.0,"y":174.0,"diam":42.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xmin":288.0,"ymin":158.0,"xmax":297.0,"ymax":173.0,"type":"rectangle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":false},{"xmin":289.0,"ymin":180.0,"xmax":298.0,"ymax":172.0,"type":"rectangle","color":"rgba(237, 237, 49, 1.0)","filled":true,"marked":false},{"xmin":29.0,"ymin":151.0,"xmax":298.0,"ymax":158.0,"type":"rectangle","color":"rgba(215, 50, 41, 1.0)","filled":true,"marked":false},{"x1":210.0,"y1":90.0,"x2":210.0,"y2":195.0,"type":"line","color":"rgba(0, 0, 0, 1.0)","filled":false,"marked":false},{"xmin":83.0,"ymin":116.0,"xmax":128.0,"ymax":133.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xmin":153.0,"ymin":111.0,"xmax":176.0,"ymax":134.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x1":165.0,"y1":105.0,"x2":165.0,"y2":135.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"xmin":14.0,"ymin":186.0,"xmax":33.0,"ymax":195.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x1":45.0,"y1":135.0,"x2":75.0,"y2":120.0,"type":"line","color":"rgba(52, 93, 169, 1.0)","filled":false,"marked":false},{"x1":75.0,"y1":135.0,"x2":45.0,"y2":120.0,"type":"line","color":"rgba(52, 93, 169, 1.0)","filled":false,"marked":false},{"x1":60.0,"y1":112.0,"x2":60.0,"y2":142.0,"type":"line","color":"rgba(52, 93, 169, 1.0)","filled":false,"marked":false}]},"arrow":{"rotate":true,"elements":[{"xcors":[150.0,0.0,105.0,105.0,195.0,195.0,300.0],"ycors":[0.0,150.0,150.0,293.0,293.0,150.0,150.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"ball":{"rotate":false,"elements":[{"x":0.0,"y":0.0,"diam":300.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"box":{"rotate":false,"elements":[{"xcors":[150.0,285.0,285.0,150.0],"ycors":[285.0,225.0,75.0,135.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[150.0,15.0,150.0,285.0],"ycors":[135.0,75.0,15.0,75.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[15.0,15.0,150.0,150.0],"ycors":[75.0,225.0,285.0,135.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x1":150.0,"y1":285.0,"x2":150.0,"y2":135.0,"type":"line","color":"rgba(0, 0, 0, 1.0)","filled":false,"marked":false},{"x1":150.0,"y1":135.0,"x2":15.0,"y2":75.0,"type":"line","color":"rgba(0, 0, 0, 1.0)","filled":false,"marked":false},{"x1":150.0,"y1":135.0,"x2":285.0,"y2":75.0,"type":"line","color":"rgba(0, 0, 0, 1.0)","filled":false,"marked":false}]},"bug":{"rotate":true,"elements":[{"x":96.0,"y":182.0,"diam":108.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":110.0,"y":127.0,"diam":80.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":110.0,"y":75.0,"diam":80.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x1":150.0,"y1":100.0,"x2":80.0,"y2":30.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":150.0,"y1":100.0,"x2":220.0,"y2":30.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true}]},"bus":{"rotate":true,"elements":[{"xcors":[15.0,15.0,15.0,30.0,270.0,285.0,285.0,285.0,270.0,30.0],"ycors":[206.0,150.0,120.0,105.0,105.0,120.0,135.0,206.0,210.0,210.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":36.0,"ymin":126.0,"xmax":231.0,"ymax":159.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x1":60.0,"y1":135.0,"x2":60.0,"y2":165.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":60.0,"y1":120.0,"x2":60.0,"y2":165.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":90.0,"y1":120.0,"x2":90.0,"y2":165.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":120.0,"y1":120.0,"x2":120.0,"y2":165.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":150.0,"y1":120.0,"x2":150.0,"y2":165.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":180.0,"y1":120.0,"x2":180.0,"y2":165.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":210.0,"y1":120.0,"x2":210.0,"y2":165.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":240.0,"y1":135.0,"x2":240.0,"y2":165.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"xmin":15.0,"ymin":174.0,"xmax":285.0,"ymax":182.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":48.0,"y":187.0,"diam":42.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xmin":240.0,"ymin":127.0,"xmax":276.0,"ymax":205.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":195.0,"y":187.0,"diam":42.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x1":257.0,"y1":120.0,"x2":257.0,"y2":207.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true}]},"butterfly":{"rotate":true,"elements":[{"xcors":[150.0,209.0,225.0,225.0,195.0,165.0,150.0],"ycors":[165.0,199.0,225.0,255.0,270.0,255.0,240.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[150.0,89.0,75.0,75.0,105.0,135.0,150.0],"ycors":[165.0,198.0,225.0,255.0,270.0,255.0,240.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[139.0,100.0,55.0,25.0,10.0,10.0,25.0,40.0,85.0,139.0],"ycors":[148.0,105.0,90.0,90.0,105.0,135.0,180.0,195.0,194.0,163.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[162.0,200.0,245.0,275.0,290.0,290.0,275.0,260.0,215.0,162.0],"ycors":[150.0,105.0,90.0,90.0,105.0,135.0,180.0,195.0,195.0,165.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[150.0,135.0,120.0,135.0,150.0,165.0,180.0,165.0],"ycors":[255.0,225.0,150.0,120.0,105.0,120.0,150.0,225.0],"type":"polygon","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":135.0,"y":90.0,"diam":30.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x1":150.0,"y1":105.0,"x2":195.0,"y2":60.0,"type":"line","color":"rgba(0, 0, 0, 1.0)","filled":false,"marked":false},{"x1":150.0,"y1":105.0,"x2":105.0,"y2":60.0,"type":"line","color":"rgba(0, 0, 0, 1.0)","filled":false,"marked":false}]},"button":{"rotate":true,"elements":[{"xmin":30.0,"ymin":75.0,"xmax":285.0,"ymax":225.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":false},{"xmin":45.0,"ymin":90.0,"xmax":270.0,"ymax":210.0,"type":"rectangle","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":true}]},"car":{"rotate":true,"elements":[{"xcors":[300.0,279.0,261.0,240.0,226.0,213.0,203.0,185.0,159.0,135.0,75.0,0.0,0.0,0.0,300.0,300.0],"ycors":[180.0,164.0,144.0,135.0,132.0,106.0,84.0,63.0,50.0,50.0,60.0,150.0,165.0,225.0,225.0,180.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":180.0,"y":180.0,"diam":90.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":30.0,"y":180.0,"diam":90.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xcors":[162.0,132.0,134.0,209.0,194.0,189.0,180.0],"ycors":[80.0,78.0,135.0,135.0,105.0,96.0,89.0],"type":"polygon","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":47.0,"y":195.0,"diam":58.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":195.0,"y":195.0,"diam":58.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":150.0,"ymin":0.0,"xmax":165.0,"ymax":60.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"circle 2":{"rotate":false,"elements":[{"x":0.0,"y":0.0,"diam":300.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":30.0,"y":30.0,"diam":240.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"cow":{"rotate":false,"elements":[{"xcors":[200.0,197.0,179.0,177.0,166.0,140.0,93.0,78.0,72.0,49.0,48.0,37.0,25.0,25.0,45.0,103.0,179.0,198.0,252.0,272.0,293.0,285.0,255.0,242.0,224.0],"ycors":[193.0,249.0,249.0,196.0,187.0,189.0,191.0,179.0,211.0,209.0,181.0,149.0,120.0,89.0,72.0,84.0,75.0,76.0,64.0,81.0,103.0,121.0,121.0,118.0,167.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[73.0,86.0,62.0,48.0],"ycors":[210.0,251.0,249.0,208.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[25.0,16.0,9.0,23.0,25.0,39.0],"ycors":[114.0,195.0,204.0,213.0,200.0,123.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"crash":{"rotate":true,"elements":[{"xcors":[135.0,120.0,15.0,90.0,30.0,120.0,150.0,165.0,300.0,195.0,240.0,150.0],"ycors":[30.0,135.0,75.0,165.0,255.0,210.0,315.0,195.0,225.0,165.0,60.0,120.0],"type":"polygon","color":"rgba(237, 237, 49, 1.0)","filled":true,"marked":false},{"xcors":[135.0,90.0,105.0,30.0,120.0,45.0,120.0,195.0,150.0,240.0,150.0,165.0],"ycors":[135.0,75.0,150.0,135.0,180.0,210.0,195.0,270.0,180.0,150.0,150.0,45.0],"type":"polygon","color":"rgba(215, 50, 41, 1.0)","filled":true,"marked":false}]},"cylinder":{"rotate":false,"elements":[{"x":0.0,"y":0.0,"diam":300.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"dot":{"rotate":false,"elements":[{"x":90.0,"y":90.0,"diam":120.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"engine":{"rotate":true,"elements":[{"xmin":30.0,"ymin":105.0,"xmax":240.0,"ymax":150.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[240.0,270.0,180.0,210.0],"ycors":[105.0,30.0,30.0,105.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[195.0,270.0,300.0,195.0],"ycors":[180.0,180.0,210.0,210.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":0.0,"y":165.0,"diam":90.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":240.0,"y":225.0,"diam":30.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":90.0,"y":165.0,"diam":90.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":195.0,"y":225.0,"diam":30.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":0.0,"ymin":30.0,"xmax":105.0,"ymax":150.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":30.0,"ymin":60.0,"xmax":75.0,"ymax":105.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xcors":[195.0,165.0,240.0,240.0],"ycors":[180.0,150.0,150.0,180.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":135.0,"ymin":75.0,"xmax":165.0,"ymax":105.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":225.0,"ymin":120.0,"xmax":255.0,"ymax":150.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":30.0,"ymin":203.0,"xmax":150.0,"ymax":218.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"face happy":{"rotate":false,"elements":[{"x":8.0,"y":8.0,"diam":285.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":60.0,"y":75.0,"diam":60.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":180.0,"y":75.0,"diam":60.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xcors":[150.0,90.0,62.0,47.0,67.0,90.0,109.0,150.0,192.0,210.0,227.0,251.0,236.0,212.0],"ycors":[255.0,239.0,213.0,191.0,179.0,203.0,218.0,225.0,218.0,203.0,181.0,194.0,217.0,240.0],"type":"polygon","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"face neutral":{"rotate":false,"elements":[{"x":8.0,"y":7.0,"diam":285.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":60.0,"y":75.0,"diam":60.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":180.0,"y":75.0,"diam":60.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xmin":60.0,"ymin":195.0,"xmax":240.0,"ymax":225.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"face sad":{"rotate":false,"elements":[{"x":8.0,"y":8.0,"diam":285.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":60.0,"y":75.0,"diam":60.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":180.0,"y":75.0,"diam":60.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xcors":[150.0,90.0,62.0,47.0,67.0,90.0,109.0,150.0,192.0,210.0,227.0,251.0,236.0,212.0],"ycors":[168.0,184.0,210.0,232.0,244.0,220.0,205.0,198.0,205.0,220.0,242.0,229.0,206.0,183.0],"type":"polygon","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"fish":{"rotate":false,"elements":[{"xcors":[44.0,21.0,15.0,0.0,15.0,0.0,13.0,20.0,45.0],"ycors":[131.0,87.0,86.0,120.0,150.0,180.0,214.0,212.0,166.0],"type":"polygon","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":false},{"xcors":[135.0,119.0,95.0,76.0,46.0,60.0],"ycors":[195.0,235.0,218.0,210.0,204.0,165.0],"type":"polygon","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":false},{"xcors":[75.0,83.0,71.0,86.0,166.0,135.0],"ycors":[45.0,77.0,103.0,114.0,78.0,60.0],"type":"polygon","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":false},{"xcors":[30.0,151.0,226.0,280.0,292.0,292.0,287.0,270.0,195.0,151.0,30.0],"ycors":[136.0,77.0,81.0,119.0,146.0,160.0,170.0,195.0,210.0,212.0,166.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":215.0,"y":106.0,"diam":30.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"flag":{"rotate":false,"elements":[{"xmin":60.0,"ymin":15.0,"xmax":75.0,"ymax":300.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[90.0,270.0,90.0],"ycors":[150.0,90.0,30.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x1":75.0,"y1":135.0,"x2":90.0,"y2":135.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":75.0,"y1":45.0,"x2":90.0,"y2":45.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true}]},"flower":{"rotate":false,"elements":[{"xcors":[135.0,165.0,180.0,180.0,150.0,165.0,195.0,195.0,165.0],"ycors":[120.0,165.0,210.0,240.0,300.0,300.0,240.0,195.0,135.0],"type":"polygon","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":false},{"x":85.0,"y":132.0,"diam":38.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":130.0,"y":147.0,"diam":38.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":192.0,"y":85.0,"diam":38.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":85.0,"y":40.0,"diam":38.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":177.0,"y":40.0,"diam":38.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":177.0,"y":132.0,"diam":38.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":70.0,"y":85.0,"diam":38.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":130.0,"y":25.0,"diam":38.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":96.0,"y":51.0,"diam":108.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":113.0,"y":68.0,"diam":74.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xcors":[189.0,219.0,249.0,279.0,234.0],"ycors":[233.0,188.0,173.0,188.0,218.0],"type":"polygon","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":false},{"xcors":[180.0,150.0,105.0,75.0,135.0],"ycors":[255.0,210.0,210.0,240.0,240.0],"type":"polygon","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":false}]},"house":{"rotate":false,"elements":[{"xmin":45.0,"ymin":120.0,"xmax":255.0,"ymax":285.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":120.0,"ymin":210.0,"xmax":180.0,"ymax":285.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xcors":[15.0,150.0,285.0],"ycors":[120.0,15.0,120.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x1":30.0,"y1":120.0,"x2":270.0,"y2":120.0,"type":"line","color":"rgba(0, 0, 0, 1.0)","filled":false,"marked":false}]},"leaf":{"rotate":false,"elements":[{"xcors":[150.0,135.0,120.0,60.0,30.0,60.0,60.0,15.0,30.0,15.0,40.0,45.0,60.0,90.0,105.0,120.0,105.0,120.0,135.0,150.0,165.0,180.0,195.0,180.0,195.0,210.0,240.0,255.0,263.0,285.0,270.0,285.0,240.0,240.0,270.0,240.0,180.0,165.0],"ycors":[210.0,195.0,210.0,210.0,195.0,180.0,165.0,135.0,120.0,105.0,104.0,90.0,90.0,105.0,120.0,120.0,60.0,60.0,30.0,15.0,30.0,60.0,60.0,120.0,120.0,105.0,90.0,90.0,104.0,105.0,120.0,135.0,165.0,180.0,195.0,210.0,210.0,195.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[135.0,135.0,120.0,105.0,105.0,135.0,165.0,165.0],"ycors":[195.0,240.0,255.0,255.0,285.0,285.0,240.0,195.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"line":{"rotate":false,"elements":[{"xmin":150.0,"ymin":0.0,"xmax":165.0,"ymax":150.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"line half":{"rotate":true,"elements":[{"x1":150.0,"y1":0.0,"x2":150.0,"y2":150.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true}]},"pentagon":{"rotate":false,"elements":[{"xcors":[150.0,15.0,60.0,240.0,285.0],"ycors":[15.0,120.0,285.0,285.0,120.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"person":{"rotate":false,"elements":[{"x":110.0,"y":5.0,"diam":80.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[105.0,120.0,90.0,105.0,135.0,150.0,165.0,195.0,210.0,180.0,195.0],"ycors":[90.0,195.0,285.0,300.0,300.0,225.0,300.0,300.0,285.0,195.0,90.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":127.0,"ymin":79.0,"xmax":172.0,"ymax":94.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[195.0,240.0,225.0,165.0],"ycors":[90.0,150.0,180.0,105.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[105.0,60.0,75.0,135.0],"ycors":[90.0,150.0,180.0,105.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"plant":{"rotate":false,"elements":[{"xmin":135.0,"ymin":90.0,"xmax":165.0,"ymax":300.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[135.0,90.0,45.0,75.0,135.0],"ycors":[255.0,210.0,195.0,255.0,285.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[165.0,210.0,255.0,225.0,165.0],"ycors":[255.0,210.0,195.0,255.0,285.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[135.0,90.0,45.0,75.0,135.0],"ycors":[180.0,135.0,120.0,180.0,210.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[165.0,165.0,225.0,255.0,210.0],"ycors":[180.0,210.0,180.0,120.0,135.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[135.0,90.0,45.0,75.0,135.0],"ycors":[105.0,60.0,45.0,105.0,135.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[165.0,165.0,225.0,255.0,210.0],"ycors":[105.0,135.0,105.0,45.0,60.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[135.0,120.0,150.0,180.0,165.0],"ycors":[90.0,45.0,15.0,45.0,90.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"sheep":{"rotate":false,"elements":[{"x":203.0,"y":65.0,"diam":88.0,"type":"circle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":true},{"x":70.0,"y":65.0,"diam":162.0,"type":"circle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":true},{"x":150.0,"y":105.0,"diam":120.0,"type":"circle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":true},{"xcors":[218.0,240.0,255.0,278.0],"ycors":[120.0,165.0,165.0,120.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":false},{"x":214.0,"y":72.0,"diam":67.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":false},{"xmin":164.0,"ymin":223.0,"xmax":179.0,"ymax":298.0,"type":"rectangle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":true},{"xcors":[45.0,30.0,30.0,15.0,45.0],"ycors":[285.0,285.0,240.0,195.0,210.0],"type":"polygon","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":true},{"x":3.0,"y":83.0,"diam":150.0,"type":"circle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":true},{"xmin":65.0,"ymin":221.0,"xmax":80.0,"ymax":296.0,"type":"rectangle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":true},{"xcors":[195.0,210.0,210.0,240.0,195.0],"ycors":[285.0,285.0,240.0,210.0,210.0],"type":"polygon","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":true},{"xcors":[276.0,285.0,302.0,294.0],"ycors":[85.0,105.0,99.0,83.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":false},{"xcors":[219.0,210.0,193.0,201.0],"ycors":[85.0,105.0,99.0,83.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":false}]},"square":{"rotate":false,"elements":[{"xmin":30.0,"ymin":30.0,"xmax":270.0,"ymax":270.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"square 2":{"rotate":false,"elements":[{"xmin":30.0,"ymin":30.0,"xmax":270.0,"ymax":270.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":60.0,"ymin":60.0,"xmax":240.0,"ymax":240.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"star":{"rotate":false,"elements":[{"xcors":[151.0,185.0,298.0,207.0,242.0,151.0,59.0,94.0,3.0,116.0],"ycors":[1.0,108.0,108.0,175.0,282.0,216.0,282.0,175.0,108.0,108.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"target":{"rotate":false,"elements":[{"x":0.0,"y":0.0,"diam":300.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":30.0,"y":30.0,"diam":240.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":60.0,"y":60.0,"diam":180.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":90.0,"y":90.0,"diam":120.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":120.0,"y":120.0,"diam":60.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"tick mark":{"rotate":true,"elements":[{"xmin":135.0,"ymin":90.0,"xmax":165.0,"ymax":240.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"tiny dot":{"rotate":true,"elements":[{"x":135.0,"y":135.0,"diam":30.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"train":{"rotate":false,"elements":[{"xmin":30.0,"ymin":105.0,"xmax":240.0,"ymax":150.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[240.0,270.0,180.0,210.0],"ycors":[105.0,30.0,30.0,105.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[195.0,270.0,300.0,195.0],"ycors":[180.0,180.0,210.0,210.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":0.0,"y":165.0,"diam":90.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":240.0,"y":225.0,"diam":30.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":90.0,"y":165.0,"diam":90.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":195.0,"y":225.0,"diam":30.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":0.0,"ymin":30.0,"xmax":105.0,"ymax":150.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":30.0,"ymin":60.0,"xmax":75.0,"ymax":105.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xcors":[195.0,165.0,240.0,240.0],"ycors":[180.0,150.0,150.0,180.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":135.0,"ymin":75.0,"xmax":165.0,"ymax":105.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":225.0,"ymin":120.0,"xmax":255.0,"ymax":150.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":30.0,"ymin":203.0,"xmax":150.0,"ymax":218.0,"type":"rectangle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"tree":{"rotate":false,"elements":[{"x":118.0,"y":3.0,"diam":94.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":120.0,"ymin":195.0,"xmax":180.0,"ymax":300.0,"type":"rectangle","color":"rgba(157, 110, 72, 1.0)","filled":true,"marked":false},{"x":65.0,"y":21.0,"diam":108.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":116.0,"y":41.0,"diam":127.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":45.0,"y":90.0,"diam":120.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":104.0,"y":74.0,"diam":152.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"triangle":{"rotate":false,"elements":[{"xcors":[150.0,15.0,285.0],"ycors":[30.0,255.0,255.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"triangle 2":{"rotate":false,"elements":[{"xcors":[150.0,15.0,285.0],"ycors":[30.0,255.0,255.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[151.0,225.0,75.0],"ycors":[99.0,223.0,224.0],"type":"polygon","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false}]},"truck":{"rotate":true,"elements":[{"xmin":4.0,"ymin":45.0,"xmax":195.0,"ymax":187.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[296.0,296.0,259.0,244.0,208.0,207.0],"ycors":[193.0,150.0,134.0,104.0,104.0,194.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xmin":195.0,"ymin":60.0,"xmax":195.0,"ymax":105.0,"type":"rectangle","color":"rgba(255, 255, 255, 1.0)","filled":true,"marked":false},{"xcors":[238.0,252.0,219.0,218.0],"ycors":[112.0,141.0,141.0,112.0],"type":"polygon","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":234.0,"y":174.0,"diam":42.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xmin":181.0,"ymin":185.0,"xmax":214.0,"ymax":194.0,"type":"rectangle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":144.0,"y":174.0,"diam":42.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":24.0,"y":174.0,"diam":42.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x":24.0,"y":174.0,"diam":42.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x":144.0,"y":174.0,"diam":42.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x":234.0,"y":174.0,"diam":42.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true}]},"turtle":{"rotate":true,"elements":[{"xcors":[215.0,240.0,246.0,228.0,215.0,193.0],"ycors":[204.0,233.0,254.0,266.0,252.0,210.0],"type":"polygon","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":false},{"xcors":[195.0,225.0,245.0,260.0,269.0,261.0,240.0,225.0,210.0],"ycors":[90.0,75.0,75.0,89.0,108.0,124.0,105.0,105.0,105.0],"type":"polygon","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":false},{"xcors":[105.0,75.0,55.0,40.0,31.0,39.0,60.0,75.0,90.0],"ycors":[90.0,75.0,75.0,89.0,108.0,124.0,105.0,105.0,105.0],"type":"polygon","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":false},{"xcors":[132.0,134.0,107.0,108.0,150.0,192.0,192.0,169.0,172.0],"ycors":[85.0,64.0,51.0,17.0,2.0,18.0,52.0,65.0,87.0],"type":"polygon","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":false},{"xcors":[85.0,60.0,54.0,72.0,85.0,107.0],"ycors":[204.0,233.0,254.0,266.0,252.0,210.0],"type":"polygon","color":"rgba(89, 176, 60, 1.0)","filled":true,"marked":false},{"xcors":[119.0,179.0,209.0,224.0,220.0,175.0,128.0,81.0,74.0,88.0],"ycors":[75.0,75.0,101.0,135.0,225.0,261.0,261.0,224.0,135.0,99.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"wheel":{"rotate":false,"elements":[{"x":3.0,"y":3.0,"diam":294.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x":30.0,"y":30.0,"diam":240.0,"type":"circle","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"x1":150.0,"y1":285.0,"x2":150.0,"y2":15.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":15.0,"y1":150.0,"x2":285.0,"y2":150.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x":120.0,"y":120.0,"diam":60.0,"type":"circle","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"x1":216.0,"y1":40.0,"x2":79.0,"y2":269.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":40.0,"y1":84.0,"x2":269.0,"y2":221.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":40.0,"y1":216.0,"x2":269.0,"y2":79.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true},{"x1":84.0,"y1":40.0,"x2":221.0,"y2":269.0,"type":"line","color":"rgba(141, 141, 141, 1.0)","filled":false,"marked":true}]},"wolf":{"rotate":false,"elements":[{"xcors":[253.0,245.0,245.0],"ycors":[133.0,131.0,133.0],"type":"polygon","color":"rgba(0, 0, 0, 1.0)","filled":true,"marked":false},{"xcors":[2.0,13.0,30.0,38.0,38.0,20.0,20.0,27.0,38.0,40.0,31.0,31.0,60.0,68.0,75.0,66.0,65.0,82.0,84.0,100.0,103.0,77.0,79.0,100.0,98.0,119.0,143.0,160.0,166.0,172.0,173.0,167.0,160.0,154.0,169.0,178.0,186.0,198.0,200.0,217.0,219.0,207.0,195.0,192.0,210.0,227.0,242.0,259.0,284.0,277.0,293.0,299.0,297.0,273.0,270.0],"ycors":[194.0,197.0,191.0,193.0,205.0,226.0,257.0,265.0,266.0,260.0,253.0,230.0,206.0,198.0,209.0,228.0,243.0,261.0,268.0,267.0,261.0,239.0,231.0,207.0,196.0,201.0,202.0,195.0,210.0,213.0,238.0,251.0,248.0,265.0,264.0,247.0,240.0,260.0,271.0,271.0,262.0,258.0,230.0,198.0,184.0,164.0,144.0,145.0,151.0,141.0,140.0,134.0,127.0,119.0,105.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[-1.0,14.0,36.0,40.0,53.0,82.0,134.0,159.0,188.0,227.0,236.0,238.0,268.0,269.0,281.0,269.0,269.0],"ycors":[195.0,180.0,166.0,153.0,140.0,131.0,133.0,126.0,115.0,108.0,102.0,98.0,86.0,92.0,87.0,103.0,113.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]},"x":{"rotate":false,"elements":[{"xcors":[270.0,225.0,30.0,75.0],"ycors":[75.0,30.0,225.0,270.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true},{"xcors":[30.0,75.0,270.0,225.0],"ycors":[75.0,30.0,225.0,270.0],"type":"polygon","color":"rgba(141, 141, 141, 1.0)","filled":true,"marked":true}]}}, {"default":{}}, 1);

function saveGameState() {
  var arr = [];
  for (i = 0; i <= 84; i++) {
    arr.push(Globals.getGlobal(i));
  }
  return { success: true, state: JSON.stringify(arr) };
}

function restoreGameState(state) {

  var arr = JSON.parse(state);
  for (i = 0; i <= 84; i++) {
    Globals.setGlobal(i, arr[i]);
  }

  Globals.setGlobal(66, true); // Ignore analysis status

  setupNewRun();

  return { success: true };

}

/**
 * Get the game state array
 * @return the game state array
 */
function getGameStateArray() {
  var arr = [];
  
  // loop through all the global variables
  for (i = 0; i <= 84; i++) {
    // add the global variable value to the array
    arr.push(Globals.getGlobal(i));
  }
  return arr;
}

// a global array containing the series objects where the index is the challenge number
challengeToSeries = [];

// the global table data
tableData = [];

/**
 * Get the series for the given challenge
 * @param challengeNumber the challenge number
 * @return the series for a challenge number
 */
function getChallengeSeries(challengeNumber) {
    if (challengeToSeries[challengeNumber] == null) {
        // initialize the series for the challenge
        var series = {};
        
        series.name = 'Challenge ' + challengeNumber;
        series.data = [];
        
        if (challengeNumber == 1) {
            series.color = 'red';
            series.marker = {};
            series.marker.symbol = 'circle';
        } else if (challengeNumber == 2) {
            series.color = 'red';
            series.marker = {};
            series.marker.symbol = 'triangle';
        } else if (challengeNumber == 3) {
            series.color = 'green';
            series.marker = {};
            series.marker.symbol = 'circle';
        } else if (challengeNumber == 4) {
            series.color = 'blue';
            series.marker = {};
            series.marker.symbol = 'circle';
        } else if (challengeNumber == 5) {
            series.color = '#8B008B';
            series.marker = {};
            series.marker.symbol = 'circle';
        }
        
        challengeToSeries[challengeNumber] = series;
    }
    
    return challengeToSeries[challengeNumber];
}

/**
 * Save the trial
 * @param success whether the student stopped the car on the target
 */
function saveTrial(success) {
    
    var studentData = {};
    
    // get the relevant variables
    var challenge = Globals.getGlobal(42);
    var step = Globals.getGlobal(43);
    var height = Globals.getGlobal(34);
    var mass = Globals.getGlobal(20);
    var friction = Globals.getGlobal(0);
    var distance = Prims.precision(Globals.getGlobal(68), 2);
    
    // set the variables into the student data
    studentData.challenge = challenge;
    studentData.step = step;
    studentData.height = height;
    studentData.mass = mass;
    studentData.friction = friction;
    studentData.distance = distance;
    studentData.success = success;
    
    // get the game state array which contains all the global variables
    gameStateArray = getGameStateArray();
    
    /*
     * set this value to false otherwise the model will not run when the student data is
     * reloaded the next time the student visits the step
     */
    gameStateArray[13] = false;
    
    // get the JSON string of the game state
    studentData.state = JSON.stringify(gameStateArray);
    
    // get the series for the current challenge
    series = getChallengeSeries(studentData.challenge);
    
    // add the new data point to the series for the current challenge
    series.data.push([height, distance]);
    
    // create a trial
    studentData.trial = {};
    
    // create an array to hold multiple series
    studentData.trial.series = [];
    
    // loop through all the challenges
    for (var x = 1; x <= 5; x++) {
    
        // get a series for a given challenge
        var series = getChallengeSeries(x);
        
        // check that the series has data
        if (series != null && series.data != null && series.data.length > 0) {
            // add the series to the trial
            studentData.trial.series.push(series);
        }
    }
    
    // add a new row to the table
    addTableRow(challenge, step, height, mass, friction, distance);
    
    // set the table data into the student data
    studentData.tableData = tableData;
    
    // create the component state
    var componentState = {};
    componentState.studentData = studentData;
    
    // save the component state to WISE
    saveWISE5State(componentState);
}

/**
 * Restore the graph data
 * @param studentData the student data
 */
function restoreGraphData(studentData) {

    if (studentData != null) {
    
        // get all of the series
        var series = studentData.trial.series;
        
        if (series != null) {
        
            // loop through all of the series. each series is a challenge.
            for (var x = 0; x < series.length; x++) {
            
                // get a series
                var tempSeries = series[x];
                
                // set the series into the challenge to series data structure
                challengeToSeries[x + 1] = tempSeries;
            }
        }
    }
}

/**
 * Initialize the table data
 */
function initializeTableData() {
    tableData = [];
    
    // create the header row
    var headerRow = [];
    
    // create the Challenge header cell
    var challengeCell = {};
    challengeCell.text = 'Challenge';
    challengeCell.editable = false;
    headerRow.push(challengeCell);
    
    // create the Step header cell
    var stepCell = {};
    stepCell.text = 'Step';
    stepCell.editable = false;
    headerRow.push(stepCell);
    
    // create the Height header cell
    var heightCell = {};
    heightCell.text = 'Height';
    heightCell.editable = false;
    headerRow.push(heightCell);
    
    // create the Mass header cell
    var massCell = {};
    massCell.text = 'Mass';
    massCell.editable = false;
    headerRow.push(massCell);
    
    // create the Friction header cell
    var frictionCell = {};
    frictionCell.text = 'Friction';
    frictionCell.editable = false;
    headerRow.push(frictionCell);
    
    // create the Distance header cell
    var distanceCell = {};
    distanceCell.text = 'Distance';
    distanceCell.editable = false;
    headerRow.push(distanceCell);
    
    // add the header row to the table
    tableData.push(headerRow);
}

/**
 * Restore the table data
 * @param studentData the student data
 */
function restoreTableData(studentData) {
    
    if (studentData != null && studentData.tableData != null) {
        // set the table data into the global table data variable
        tableData = studentData.tableData;
    }
}

/**
 * Add a row to the table data
 * @param challenge the challenge number
 * @param step the step number
 * @param height the height car
 * @param mass the mass of the car
 * @param friction the amount of friction
 * @param distance the distance the car travelled 
 */
function addTableRow(challenge, step, height, mass, friction, distance) {
    var row = [];
    
    // create the challenge cell
    var challengeCell = {};
    challengeCell.text = challenge;
    challengeCell.editable = false;
    row.push(challengeCell);
    
    // create the step cell
    var stepCell = {};
    stepCell.text = step;
    stepCell.editable = false;
    row.push(stepCell);
    
    // create the height cell
    var heightCell = {};
    heightCell.text = height;
    heightCell.editable = false;
    row.push(heightCell);
    
    // create the mass cell
    var massCell = {};
    massCell.text = mass;
    massCell.editable = false;
    row.push(massCell);
    
    // create the friction cell
    var frictionCell = {};
    frictionCell.text = friction;
    frictionCell.editable = false;
    row.push(frictionCell);
    
    // create the distance cell
    var distanceCell = {};
    distanceCell.text = distance;
    distanceCell.editable = false;
    row.push(distanceCell);
    
    // add the row to the table
    tableData.push(row);
}

/**
 * Send an event to the parent
 * @param event the event object
 */
function saveWISE5Event(event) {
    event.messageType = 'event';
    sendMessage(event);
}

/**
 * Send a component state to the parent
 * @param componentState the component state
 */
function saveWISE5State(componentState) {
    componentState.messageType = 'studentWork';
    sendMessage(componentState);
}

/**
 * Get student work from other components by asking the parent for the work
 */
function getStudentWork(params) {

    // make a message to request the other student work
    var message = {
        messageType: "getStudentWork",
        getStudentWorkParams: params
    };

    // send the message to request the other student work
    sendMessage(message);
}

/**
 * Get the latest student work for this component
 */
function getLatestStudentWork() {
    
    // make a message to request the latest student work
    var message = {
        messageType: "getLatestStudentWork"
    };
    
    // send the message to request the latest student work
    sendMessage(message);
}

/**
 * Send a message to the parent
 * @param the message to send to the parent
 */
function sendMessage(message) {
    parent.postMessage(message, "*");
}

/**
 * Receive a message from the parent
 * @param message the message from the parent
 */
function receiveMessage(message) {

    if (message != null) {
        var messageData = message.data;

        if (messageData != null) {
            if (messageData.messageType == 'latestStudentWork') {
                /*
                 * we requested the latest student work so that we can re-populate the
                 * student work. this message is the response that includes the latest
                 * student work.
                 */
            
                // make sure we have not already initialized the student data
                if (!initialized) {
                    // we have not initialized the student data yet
                    
                    // get the latest student work
                    var latestStudentWork = messageData.latestStudentWork;
                
                    if (latestStudentWork != null) {
                    
                        // get the student data
                        var studentData = latestStudentWork.studentData;
                        
                        if (studentData != null) {
                            if (studentData.state != null) {
                                // get the game state from the student data
                                var state = studentData.state;
                                
                                // restore the game state
                                restoreGameState(state);
                                
                                // restore the table data
                                restoreTableData(studentData);
                                
                                // restore the graph data
                                restoreGraphData(studentData);
                                
                                // set the initialized flag to true
                                initialized = true;
                            }
                        }
                    }
                }
            } else if (messageData.messageType == 'studentWork') {
                /*
                 * the student work from this step has just been saved and the latest 
                 * student work has been included in the message data
                 */
                this.latestStudentWorkFromThisComponent = messageData.latestStudentWorkFromThisComponent;
                this.latestStudentWorkFromThisNode = messageData.latestStudentWorkFromThisNode;
            }
        }
    }
}

// listen for messages from the parent
window.addEventListener('message', receiveMessage);